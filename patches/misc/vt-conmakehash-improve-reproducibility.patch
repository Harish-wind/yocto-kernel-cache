From fd6ef43a34828f19722d61d041bb4355b80f5e45 Mon Sep 17 00:00:00 2001
From: Bruce Ashfield <bruce.ashfield@gmail.com>
Date: Sat, 1 Jun 2024 00:00:31 -0400
Subject: [PATCH] vt/conmakehash: improve reproducibility

The file generated by conmakehash capture the application
path used to generate the file. While that can be informative,
it varies based on where the kernel was built, as the full
path is captured.

We tweak the application to use a second input as the "capture
name", and then modify the Makefile to pass the basename of
the source, making it reproducible.

This could be improved by using some sort of path mapping,
or the application manipualing argv[1] itself, but for now
this solves the reprodicibility issue.

Signed-off-by: Bruce Ashfield <bruce.ashfield@gmail.com>
---
 drivers/tty/vt/Makefile      |  2 +-
 drivers/tty/vt/conmakehash.c | 13 ++++++++-----
 2 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/drivers/tty/vt/Makefile b/drivers/tty/vt/Makefile
index 2c8ce8b592ed..8532077ed3bb 100644
--- a/drivers/tty/vt/Makefile
+++ b/drivers/tty/vt/Makefile
@@ -15,7 +15,7 @@ clean-files := consolemap_deftbl.c defkeymap.c
 hostprogs += conmakehash
 
 quiet_cmd_conmk = CONMK   $@
-      cmd_conmk = $(obj)/conmakehash $< > $@
+      cmd_conmk = $(obj)/conmakehash $< $(shell basename $<) > $@
 
 $(obj)/consolemap_deftbl.c: $(src)/$(FONTMAPFILE) $(obj)/conmakehash
 	$(call cmd,conmk)
diff --git a/drivers/tty/vt/conmakehash.c b/drivers/tty/vt/conmakehash.c
index dc2177fec715..bff2c178b644 100644
--- a/drivers/tty/vt/conmakehash.c
+++ b/drivers/tty/vt/conmakehash.c
@@ -109,8 +109,11 @@ int main(int argc, char *argv[])
       while (*rel_tblname == '/')
 	++rel_tblname;
     }
-  else
-    rel_tblname = tblname;
+  else {
+    // abs_srctree was null or invalid, let's use the relative version
+    // of the tbl file passed as arg2
+    rel_tblname = argv[2];
+  }
 
   /* For now we assume the default font is always 256 characters. */
   fontlen = 256;
@@ -209,7 +212,7 @@ int main(int argc, char *argv[])
 "%s: Corresponding to a range of font positions, there should be a Unicode range\n",
 			  tblname);
 		  exit(EX_DATAERR);
-	        }
+                }
 	      p++;
 	      un1 = getunicode(&p);
 	      if (un0 < 0 || un1 < 0)
@@ -218,14 +221,14 @@ int main(int argc, char *argv[])
 "%s: Bad Unicode range corresponding to font position range 0x%x-0x%x\n",
 			  tblname, fp0, fp1);
 		  exit(EX_DATAERR);
-	        }
+                }
 	      if (un1 - un0 != fp1 - fp0)
 		{
 		  fprintf(stderr,
 "%s: Unicode range U+%x-U+%x not of the same length as font position range 0x%x-0x%x\n",
 			  tblname, un0, un1, fp0, fp1);
 		  exit(EX_DATAERR);
-	        }
+                }
 	      for(i=fp0; i<=fp1; i++)
 		addpair(i,un0-fp0+i);
 	    }
-- 
2.39.2

