From 31ceb3e02c39d2d2667d9afef6cf04cf29b3e387 Mon Sep 17 00:00:00 2001
From: John Ogness <john.ogness@linutronix.de>
Date: Fri, 30 Dec 2022 15:49:42 +0106
Subject: [PATCH 29/87] printk: Add NMI check to console_flush_on_panic() and
 console_unblank()

The printk path is NMI safe because it only adds content to the
buffer and then triggers the delayed output via irq_work. If the
console is flushed or unblanked on panic (from NMI context) then it
can deadlock in down_trylock_console_sem() because the semaphore is
not NMI safe.

Avoid taking the console_lock when flushing in panic and the current
context is NMI. Since the consoles are encouraged to ignore their
locks and also will stop printing if not the panic CPU, this change
does not really make things any more dangerous. But it does avoid
a possible deadlock in NMI context.

Skip unblanking in panic if the current context is NMI.

Signed-off-by: John Ogness <john.ogness@linutronix.de>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
---
 kernel/printk/printk.c | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 08a9419046b6..d5bd044b73f5 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -3142,7 +3142,12 @@ void console_flush_on_panic(enum con_flush_mode mode)
 	 * If another context is holding the console lock,
 	 * @console_may_schedule might be set. Clear it so that
 	 * this context does not call cond_resched() while flushing.
+	 *
+	 * Since semaphores are not NMI-safe, the console lock must be
+	 * ignored if the panic is in NMI context.
 	 */
+	if (!in_nmi())
+		console_trylock();
 	console_may_schedule = 0;
 
 	if (mode == CONSOLE_REPLAY_ALL) {
@@ -3164,6 +3169,8 @@ void console_flush_on_panic(enum con_flush_mode mode)
 	}
 
 	console_flush_all(false, &next_seq, &handover);
+	if (!in_nmi())
+		console_unlock();
 }
 
 /*
@@ -3192,7 +3199,8 @@ struct tty_driver *console_device(int *index)
 	}
 	console_srcu_read_unlock(cookie);
 
-	console_unlock();
+	if (!in_nmi())
+		console_unlock();
 	return driver;
 }
 
-- 
2.34.1

